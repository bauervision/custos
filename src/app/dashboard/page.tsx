"use client";

import { useEffect, useMemo, useState } from "react";
import { loadLatestRun } from "@/lib/results";
import type { VendorAgg } from "@/components/loading/VendorCard";
import VendorCard from "@/components/loading/VendorCard";
import Donut from "@/components/dashboard/Donut";
import { recommendationScore, riskFromBreakdown } from "@/lib/scoring";
import { riskTier, riskGradients } from "@/lib/palette";
import Link from "next/link";

type BBox = { south: number; west: number; north: number; east: number };

export default function DashboardPage() {
  // --- HOOKS (always in the same order) ---
  const data = useMemo(() => loadLatestRun(), []);
  const [vendors, setVendors] = useState<VendorAgg[]>([]);
  const [counts, setCounts] = useState<Record<string, number>>({});

  useEffect(() => {
    if (data?.vendors) setVendors(data.vendors);
    if (data?.counts) setCounts(data.counts);
  }, [data]);

  const sorted = useMemo(() => {
    return [...vendors].sort((a, b) => {
      const ar = recommendationScore(riskFromBreakdown(a.breakdown));
      const br = recommendationScore(riskFromBreakdown(b.breakdown));
      return br - ar;
    });
  }, [vendors]);

  // --- Derived (no hooks below this point) ---
  const top3 = sorted.slice(0, 3);

  const totalVendors = vendors.length;
  const avgRisk = Math.round(
    vendors.reduce((s, v) => s + riskFromBreakdown(v.breakdown), 0) /
      (totalVendors || 1)
  );
  const avgRec = 100 - avgRisk;

  const mix = vendors.reduce(
    (m, v) => {
      m.finance += v.breakdown.finance;
      m.ethics += v.breakdown.ethics;
      m.logistics += v.breakdown.logistics;
      return m;
    },
    { finance: 0, ethics: 0, logistics: 0 }
  );
  const mixTotal = Math.max(1, mix.finance + mix.ethics + mix.logistics);
  const pct = (n: number) => Math.round((n / mixTotal) * 100);

  const topKeywords = Object.entries(counts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);

  // AOI/meta from the saved run (if present)
  const aoi = (data as any)?.aoi as
    | { center?: { lat: number; lon: number }; bounds?: BBox }
    | undefined;
  const seedText = (data as any)?.seed as string | undefined;
  const runDate = new Date((data?.createdAt ?? Date.now()) as number);

  // --- Markdown report block you already had ---
  const mdReport = useMemo(() => {
    const pick = (v?: VendorAgg) =>
      v ? `${v.name}${v.country ? ` (${v.country})` : ""}` : undefined;
    const kwords = Object.entries(counts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([k, v]) => `${k} (×${v})`)
      .join(", ");

    return [
      `# Custos Vendor Vetting Report`,
      ``,
      `**Run date:** ${runDate.toLocaleString()}${
        seedText ? `  \n**Seed:** ${seedText}` : ""
      }${
        aoi?.center
          ? `  \n**AOI Center:** ${aoi.center.lat.toFixed(
              2
            )}, ${aoi.center.lon.toFixed(2)}`
          : ""
      }`,
      ``,
      `## Executive Summary`,
      `- Vendors surfaced: **${totalVendors}**`,
      `- Average recommendation: **${avgRec}/100** (avg risk: ${avgRisk})`,
      `- Top picks: ${
        [pick(top3[0]), pick(top3[1]), pick(top3[2])]
          .filter(Boolean)
          .join(", ") || "—"
      }`,
      ``,
      `## Risk Mix (aggregate)`,
      `- Finance: ${mix.finance}`,
      `- Ethics: ${mix.ethics}`,
      `- Logistics: ${mix.logistics}`,
      ``,
      `## Key Signals`,
      kwords ? `Top keywords: ${kwords}` : `No dominant keywords captured.`,
      ``,
      `## Prescriptive Recommendations`,
      `1. Prioritize ${top3[0]?.name ?? "the top vendor"} and ${
        top3[1]?.name ?? "the next pick"
      } for immediate negotiation based on current scoring.`,
      `2. Mitigate ethics exposure via third-party audit and require chain-of-custody attestations for award.`,
      `3. Lock logistics SLAs to cap lead-time variance; pre-clear customs & HS codes for ${
        top3[0]?.country ?? "target region"
      }.`,
      `4. Hedge financial risk on tariffs/currency where flagged during the run.`,
    ].join("\n");
  }, [
    counts,
    runDate,
    seedText,
    aoi,
    totalVendors,
    avgRec,
    avgRisk,
    mix,
    top3,
  ]);

  // --- NEW: Comprehensive narrative (paragraph style) ---
  const narrativeText = useMemo(() => {
    const topKW = Object.entries(counts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8)
      .map(([k]) => k);

    const vendorLine = (v?: VendorAgg) => {
      if (!v) return "";
      const kw = (v.keywords || []).slice(0, 6);
      const kwText = kw.length ? ` Key signals include ${kw.join(", ")}.` : "";
      return `${v.name}${v.country ? ` (${v.country})` : ""}.${kwText}`;
    };

    const overview = [
      `This report summarizes the vendor landscape generated by Custos on ${runDate.toLocaleDateString()}.`,
      seedText ? `The analysis was seeded with: “${seedText}.”` : "",
      aoi?.center
        ? `An Area of Interest (AOI) was applied, centered near ${aoi.center.lat.toFixed(
            2
          )}, ${aoi.center.lon.toFixed(
            2
          )}, which constrained both the map and vendor list.`
        : `No AOI filter was applied; results reflect the full dataset.`,
      topKW.length
        ? `Across all vendors, the most prominent signals observed were ${topKW.join(
            ", "
          )}.`
        : `No dominant global signals were observed during this run.`,
    ]
      .filter(Boolean)
      .join(" ");

    const financial = `Financial risk signals accounted for approximately ${pct(
      mix.finance
    )}% of the aggregate risk mix, suggesting that cost volatility, tariff exposure, or capital intensity are material factors to monitor.`;

    const ethics = `Ethics-related risk signals contributed ~${pct(
      mix.ethics
    )}% of the overall profile. Where applicable, diligence should include labor standards, provenance/chain-of-custody, and regulatory compliance checks aligned to the target market.`;

    const logistics = `Logistics risk signals comprised roughly ${pct(
      mix.logistics
    )}% of the mix. Lead-time variability, routing constraints, and customs considerations may affect schedule confidence and should be mitigated through SLAs and pre-clearance where possible.`;

    const capability = [
      `The top recommendations emerging from this run are:`,
      top3[0] ? `1) ${vendorLine(top3[0])}` : "",
      top3[1] ? `2) ${vendorLine(top3[1])}` : "",
      top3[2] ? `3) ${vendorLine(top3[2])}` : "",
      `These vendors scored favorably based on the blended recommendation score (lower aggregate risk corresponds to higher recommendation).`,
    ]
      .filter(Boolean)
      .join(" ");

    const prescriptive = [
      `Recommended actions:`,
      `• Engage ${top3[0]?.name ?? "the top vendor"} and ${
        top3[1]?.name ?? "the next pick"
      } for commercial discussions focusing on scope, schedule, and pricing.`,
      `• Institute third-party ethics audits and require chain-of-custody attestations for award decisions where relevant.`,
      `• Lock logistics SLAs to cap lead-time variance; pre-clear customs and HS codes for ${
        top3[0]?.country ?? "the target region"
      }.`,
      `• If finance signals are elevated, consider currency and tariff hedging instruments consistent with procurement policy.`,
    ].join(" ");

    const close = `Overall, this run surfaced ${totalVendors} vendors with an average recommendation of ${avgRec}/100 (avg risk ${avgRisk}). The findings should be revisited as new signals arrive or as the AOI and seed criteria evolve.`;

    return {
      overview,
      financial,
      ethics,
      logistics,
      capability,
      prescriptive,
      close,
    };
  }, [
    counts,
    mix,
    aoi,
    seedText,
    runDate,
    top3,
    totalVendors,
    avgRec,
    avgRisk,
  ]);

  function downloadJSON() {
    try {
      const payload = {
        vendors: sorted,
        counts,
        createdAt: data?.createdAt ?? Date.now(),
      };
      const blob = new Blob([JSON.stringify(payload, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "custos-report.json";
      a.click();
      URL.revokeObjectURL(url);
    } catch {}
  }

  function copyMarkdown() {
    try {
      navigator.clipboard.writeText(mdReport);
    } catch {}
  }

  function downloadMarkdown() {
    try {
      const blob = new Blob([mdReport], { type: "text/markdown" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "custos-report.md";
      a.click();
      URL.revokeObjectURL(url);
    } catch {}
  }

  // NEW: copy/download handlers for the narrative
  function copyNarrative() {
    const t = [
      "Comprehensive Vendor Narrative",
      "",
      narrativeText.overview,
      "",
      "Financial Stability Analysis",
      narrativeText.financial,
      "",
      "Vulnerabilities & Threats",
      narrativeText.ethics,
      narrativeText.logistics,
      "",
      "Capability & Suitability",
      narrativeText.capability,
      "",
      "Recommendations",
      narrativeText.prescriptive,
      "",
      "Conclusion",
      narrativeText.close,
    ].join("\n");
    try {
      navigator.clipboard.writeText(t);
    } catch {}
  }

  function downloadNarrative() {
    const t = [
      "Comprehensive Vendor Narrative",
      "",
      narrativeText.overview,
      "",
      "Financial Stability Analysis",
      narrativeText.financial,
      "",
      "Vulnerabilities & Threats",
      narrativeText.ethics,
      narrativeText.logistics,
      "",
      "Capability & Suitability",
      narrativeText.capability,
      "",
      "Recommendations",
      narrativeText.prescriptive,
      "",
      "Conclusion",
      narrativeText.close,
    ].join("\n");
    try {
      const blob = new Blob([t], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "custos-narrative.txt";
      a.click();
      URL.revokeObjectURL(url);
    } catch {}
  }

  // Early return AFTER all hooks
  if (!vendors.length) {
    return (
      <div className="mx-auto max-w-4xl px-4 py-12">
        <h1 className="text-2xl font-semibold mb-3">
          Summary & Recommendations
        </h1>
        <p className="text-white/70">
          No recent run found. Try{" "}
          <a className="underline" href="/loading">
            running a report
          </a>{" "}
          first.
        </p>
      </div>
    );
  }

  // --- RENDER ---
  return (
    <div className="mx-auto max-w-6xl px-4 py-8">
      <div className="flex items-center justify-between gap-3">
        <h1 className="text-2xl font-semibold">Summary & Recommendations</h1>
        <div className="flex gap-2">
          <a href="/results" className="cta-primary">
            View Map
          </a>
          <button
            onClick={downloadJSON}
            className="rounded-lg bg-white/10 px-3 py-1.5 text-sm hover:bg-white/20"
          >
            Export JSON
          </button>
        </div>
      </div>

      {/* Top Picks — Highlighted */}
      <div className="mt-10">
        <div className="mb-3 flex items-center justify-between">
          <div className="text-2xl text-white/70">Top Recommendations</div>
        </div>

        {/* Section frame with subtle glow */}
        <div className="relative rounded-2xl p-[1px] bg-gradient-to-r from-emerald-400/30 via-cyan-300/30 to-purple-400/30">
          <div className="rounded-2xl bg-white/[0.03] p-4 border border-white/10">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {top3.map((v, i) => {
                const tier = riskTier(riskFromBreakdown(v.breakdown));
                const gradient = riskGradients[tier];
                const rank = i + 1;
                const slug = v.name.toLowerCase().replace(/\s+/g, "-");
                return (
                  <div
                    key={v.name}
                    className={`
                relative rounded-xl border border-white/10 bg-white/[0.04]
                shadow-[0_10px_30px_rgba(0,0,0,0.3)]
                hover:shadow-[0_18px_44px_rgba(0,0,0,0.4)] transition-shadow
              `}
                  >
                    {/* Risk-tinted halo */}
                    <div
                      className={`pointer-events-none absolute -inset-0.5 rounded-xl blur-xl opacity-30 bg-gradient-to-r ${gradient}`}
                      aria-hidden
                    />

                    {/* Rank badge */}
                    <div className="absolute -top-2 -left-2 z-20">
                      <div
                        className={`rounded-full px-2.5 py-1 text-xs font-semibold text-black bg-gradient-to-r ${gradient} shadow`}
                      >
                        #{rank}
                      </div>
                    </div>

                    {/* VendorCard content */}
                    <div className="relative z-10">
                      <Link key={v.name} href={`/vendor/${slug}`}>
                        <VendorCard v={v} />
                      </Link>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>

      {/* KPIs */}
      <div className="mt-6 grid gap-3 sm:grid-cols-3">
        <div className="rounded-xl border border-white/10 bg-white/[0.03] p-4">
          <div className="text-xs uppercase tracking-wide text-white/60">
            Vendors surfaced
          </div>
          <div className="mt-1 text-2xl font-semibold">{totalVendors}</div>
        </div>
        <div className="rounded-xl border border-white/10 bg-white/[0.03] p-4">
          <div className="text-xs uppercase tracking-wide text-white/60">
            Avg recommendation
          </div>
          <div className="mt-1 text-2xl font-semibold">{avgRec}/100</div>
          <div className="text-xs text-white/60">Avg risk: {avgRisk}</div>
        </div>
        <div className="rounded-xl border border-white/10 bg-white/[0.03] p-4">
          <div className="text-xs uppercase tracking-wide text-white/60">
            Top signals
          </div>
          <div className="mt-2 flex flex-wrap gap-1.5">
            {topKeywords.map(([k, v]) => (
              <span
                key={k}
                className="rounded-full border border-white/15 bg-white/5 px-2 py-0.5 text-[11px] text-white/80"
              >
                {k} <span className="text-white/40">×{v}</span>
              </span>
            ))}
          </div>
        </div>
      </div>

      {/* Middle: Risk mix + Prescriptive bullets */}
      <div className="mt-8 grid gap-6 lg:grid-cols-[280px_1fr]">
        <div className="rounded-xl border border-white/10 bg-white/[0.03] p-4">
          <Donut
            data={[
              { label: "Finance", value: mix.finance },
              { label: "Ethics", value: mix.ethics },
              { label: "Logistics", value: mix.logistics },
            ]}
          />
        </div>

        <div className="rounded-xl border border-white/10 bg-white/[0.03] p-4">
          <div className="mb-2 text-sm font-medium text-white/80">
            Prescriptive Recommendations
          </div>
          <ul className="list-disc pl-6 space-y-2 text-white/85 text-sm">
            <li>
              Prioritize{" "}
              <span className="font-semibold">
                {top3[0]?.name ?? "the top vendor"}
              </span>{" "}
              and{" "}
              <span className="font-semibold">
                {top3[1]?.name ?? "the next pick"}
              </span>{" "}
              for immediate negotiation.
            </li>
            <li>
              Mitigate ethics exposure via third-party audit and require
              chain-of-custody attestations for award.
            </li>
            <li>
              Lock logistics SLAs to cap lead time variance; pre-clear customs
              and HS codes for {top3[0]?.country ?? "target region"}.
            </li>
            <li>
              Hedge financial risk on tariffs/currency where flagged during the
              run.
            </li>
          </ul>
        </div>
      </div>

      {/* Existing: Full Text Report (Markdown summary + controls) */}
      <div className="mt-10 rounded-xl border border-white/10 bg-white/[0.03] p-4">
        <div className="flex items-center justify-between gap-3">
          <div className="text-sm font-medium text-white/80">
            Full Text Report
          </div>
        </div>

        <article className="prose prose-invert max-w-none mt-4">
          <h2>Custos Vendor Vetting Report</h2>
          <p>
            <strong>Run date:</strong> {runDate.toLocaleString()}
            <br />
            {seedText && (
              <>
                <strong>Seed:</strong> {seedText}
                <br />
              </>
            )}
            {aoi?.center && (
              <>
                <strong>AOI Center:</strong> {aoi.center.lat.toFixed(2)},{" "}
                {aoi.center.lon.toFixed(2)}
              </>
            )}
          </p>

          <h3>Executive Summary</h3>
          <ul>
            <li>
              Vendors surfaced: <strong>{totalVendors}</strong>
            </li>
            <li>
              Average recommendation: <strong>{avgRec}/100</strong> (avg risk:{" "}
              {avgRisk})
            </li>
            <li>
              Top picks:{" "}
              {[top3[0]?.name, top3[1]?.name, top3[2]?.name]
                .filter(Boolean)
                .join(", ") || "—"}
            </li>
          </ul>

          <h3>Risk Mix (aggregate)</h3>
          <ul>
            <li>Finance: {mix.finance}</li>
            <li>Ethics: {mix.ethics}</li>
            <li>Logistics: {mix.logistics}</li>
          </ul>

          <h3>Key Signals</h3>
          <p>
            {Object.keys(counts).length
              ? Object.entries(counts)
                  .sort((a, b) => b[1] - a[1])
                  .slice(0, 10)
                  .map(([k, v]) => `${k} (×${v})`)
                  .join(", ")
              : "No dominant keywords captured."}
          </p>

          <h3>Prescriptive Recommendations</h3>
          <ol>
            <li>
              Prioritize <strong>{top3[0]?.name ?? "the top vendor"}</strong>{" "}
              and <strong>{top3[1]?.name ?? "the next pick"}</strong> for
              immediate negotiation.
            </li>
            <li>
              Mitigate ethics exposure via third-party audit and require
              chain-of-custody attestations for award.
            </li>
            <li>
              Lock logistics SLAs to cap lead-time variance; pre-clear customs
              &amp; HS codes for {top3[0]?.country ?? "target region"}.
            </li>
            <li>
              Hedge financial risk on tariffs/currency where flagged during the
              run.
            </li>
          </ol>

          <div className="mt-4 flex gap-2">
            <button
              onClick={copyMarkdown}
              className="rounded-lg border border-white/20 px-3 py-1.5 text-sm hover:bg-white/10"
            >
              Copy Markdown
            </button>
            <button
              onClick={downloadMarkdown}
              className="rounded-lg bg-white/10 px-3 py-1.5 text-sm hover:bg-white/20"
            >
              Download .md
            </button>
          </div>
        </article>
      </div>

      {/* NEW: Comprehensive Narrative (paragraphs) */}
      <div className="mt-8 rounded-xl border border-white/10 bg-white/[0.03] p-4">
        <div className="flex items-center justify-between gap-3">
          <div className="text-sm font-medium text-white/80">
            Comprehensive Narrative
          </div>
          <div className="flex gap-2">
            <button
              onClick={copyNarrative}
              className="rounded-lg border border-white/20 px-3 py-1.5 text-sm hover:bg-white/10"
            >
              Copy Text
            </button>
            <button
              onClick={downloadNarrative}
              className="rounded-lg bg-white/10 px-3 py-1.5 text-sm hover:bg-white/20"
            >
              Download .txt
            </button>
          </div>
        </div>

        <article className="prose prose-invert max-w-none mt-4">
          <h3>Overview</h3>
          <p>{narrativeText.overview}</p>

          <h3>Financial Stability Analysis</h3>
          <p>{narrativeText.financial}</p>

          <h3>Vulnerabilities &amp; Threats</h3>
          <p>{narrativeText.ethics}</p>
          <p>{narrativeText.logistics}</p>

          <h3>Capability &amp; Suitability</h3>
          <p>{narrativeText.capability}</p>

          <h3>Conclusion &amp; Next Steps</h3>
          <p>{narrativeText.prescriptive}</p>
          <p>{narrativeText.close}</p>
        </article>
      </div>
    </div>
  );
}
